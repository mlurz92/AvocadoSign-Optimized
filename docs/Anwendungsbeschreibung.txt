**Anwendungsbeschreibung: Avocado-Sign-Optimized**

Diese Dokumentation beschreibt die "Avocado-Sign-Optimized"-Anwendung, eine spezialisierte Web-Applikation zur Analyse, Auswertung und Publikationsvorbereitung von Daten im Kontext der MRT-basierten Lymphknoten-Staging beim Rektumkarzinom. Die Anwendung ist darauf ausgelegt, Forschern und Medizinern eine robuste, statistisch fundierte und benutzerfreundliche Plattform für die Evaluierung diagnostischer Kriterien, insbesondere des Avocado Signs im Vergleich zu etablierten T2-gewichteten MRT-Kriterien, zur Verfügung zu stellen.

### **Teil 1: Funktion und Optik der Anwendung**

Die "Avocado-Sign-Optimized"-Anwendung ist eine Single-Page-Application (SPA) mit einer intuitiven, tab-basierten Benutzeroberfläche. Sie ist responsiv gestaltet und passt sich an verschiedene Bildschirmgrößen an, von Desktops bis zu mobilen Geräten. Die visuelle Gestaltung basiert auf einem sauberen, modernen Design, das die Lesbarkeit und Benutzerfreundlichkeit in einem medizinisch-wissenschaftlichen Kontext priorisiert. Wichtige Informationen werden **hervorgehoben**, und interaktive Elemente sind klar erkennbar.

#### **Allgemeine UI/UX-Prinzipien**

* **Übersichtliche Navigation:** Eine horizontale Navigationsleiste ermöglicht den schnellen Wechsel zwischen den Hauptfunktionsbereichen (Tabs). Der aktuell aktive Tab ist optisch hervorgehoben.  
* **Konsistentes Layout:** Jede Sektion (Tab) folgt einem konsistenten Layout mit klaren Überschriften, Eingabebereichen, Anzeige- und Ergebnisbereichen.  
* **Responsives Design:** Die Benutzeroberfläche passt sich flexibel an verschiedene Bildschirmgrößen an, um eine optimale Darstellung und Bedienbarkeit auf allen Geräten zu gewährleisten.  
* **Interaktive Elemente:** Schaltflächen, Checkboxen und Eingabefelder sind klar benannt und bieten eine intuitive Bedienung.  
* **Tooltips (Tippy.js):** Fast alle relevanten UI-Elemente, insbesondere Tabellenspalten und Diagrammbeschriftungen, sind mit detaillierten Tooltips versehen, die bei Mouse-Over (Desktop) oder Tap (Touch-Geräte) zusätzliche Informationen und Erklärungen liefern. Dies erhöht die Benutzerfreundlichkeit und das Verständnis komplexer Inhalte erheblich.  
* **Visuelles Feedback:** Ladeindikatoren (z.B. Fortschrittsbalken beim Brute-Force), Statusanzeigen und visuelle Hervorhebungen (z.B. farbige Badges in Tabellen für positiven/negativen Status) geben dem Benutzer direktes Feedback zu laufenden Prozessen und Ergebnissen.

#### **Detaillierte Beschreibung der Tabs und ihrer Elemente**

1. **Daten-Tab (Tab "Daten")**  
   * **Funktion:** Dieser Tab dient als zentraler Einstiegspunkt für das Laden und Management von Patientendaten. Er ermöglicht die Anzeige einer detaillierten Übersicht aller importierten Patientenfälle.  
   * **Optik/Elemente:**  
     * **Texteingabefeld (patient-data-input):** Ein großes Textfeld, in das Patientendaten im JSON-Format eingefügt werden können.  
     * **Schaltflächen:**  
       * **"Daten laden" (load-data-button):** Importiert die Daten aus dem Textfeld.  
       * **"Daten zurücksetzen" (reset-data-button):** Leert die aktuell geladenen Patientendaten.  
     * **Patiententabelle (data-display, daten-table):** Eine interaktive Tabelle, die die wesentlichen demographischen und klinischen Daten jedes Patienten anzeigt (z.B. Name, Alter, Geschlecht, Therapie).  
       * **Spalten:** Nr, Name, Vorname, Geschl., Alter, Therapie, N/AS/T2, Bemerkung, Details.  
       * **N/AS/T2-Spalte:** Zeigt den histopathologischen N-Status ("N"), den Avocado Sign Status ("AS") und den T2-Kriterien Status ("T2") an. Diese Status werden als farbige Badges dargestellt (Grün für Positiv, Rot für Negativ, Grau für N/A). Die Sub-Header (N, AS, T2) sind klickbar für eine Sub-Sortierung.  
       * **Sortierung:** Alle Spalten sind klickbar, um die Tabelle nach der jeweiligen Spalte auf- oder absteigend zu sortieren. Ein Sortier-Icon (fas fa-sort) zeigt den aktuellen Sortierstatus an.  
       * **Detailansicht (details-toggle-button):** Jede Patientenzeile enthält einen kleinen Button (Chevron-Icon), der beim Anklicken eine erweiterte Detailzeile unterhalb der Hauptzeile ein- oder ausblendet. Diese Detailzeile zeigt zusätzliche, feinere Patienteninformationen (z.B. spezifische Lymphknotenmerkmale, Scores für Avocado Sign und T2-Kriterien).  
       * **"Alle Details Anzeigen" / "Alle Details Ausblenden" Button:** Ein globaler Button oberhalb der Tabelle, der alle Detailzeilen der Patienten in der Tabelle gleichzeitig ein- oder ausblendet.  
     * **Daten-Zusammenfassung (data-summary):** Ein kleiner Bereich unterhalb der Tabelle, der grundlegende Zählungen der geladenen Daten anzeigt (z.B. Gesamtzahl Patienten, Anzahl N-positiver Patienten).  
2. **Auswertung-Tab (Tab "Auswertung")**  
   * **Funktion:** Dieser Tab ermöglicht die Anwendung und Bewertung des Avocado Signs und der T2-Kriterien auf die geladenen Patientendaten. Die Ergebnisse werden in einer detaillierten Tabelle angezeigt.  
   * **Optik/Elemente:**  
     * **Kriterienauswahl ("Avocado-Sign-Kriterien" und "T2-Kriterien"):**  
       * Zwei separate Bereiche mit Listen von Checkboxen.  
       * Jede Checkbox repräsentiert ein spezifisches Avocado Sign Merkmal oder einen T2-Kriteriensatz (z.B. "Koh 2008").  
       * Tooltips für jede Checkbox geben detaillierte Informationen über das Kriterium.  
       * **"Avocado-Sign anwenden" (apply-avocado-criteria):** Wendet das Avocado Sign mit den ausgewählten Kriterien auf alle Patienten an.  
       * **"T2-Kriterien anwenden" (apply-t2-criteria):** Wendet die ausgewählten T2-Kriteriensätze auf alle Patienten an.  
     * **Angewendete Kriterien-Zusammenfassung:** Eine "Card" zeigt an, welche Avocado Sign Kriterien und T2-Kriteriensätze zuletzt angewendet wurden.  
     * **Auswertungstabelle (auswertung-results, auswertung-table):** Ähnlich der Tabelle im Daten-Tab, aber mit Fokus auf Auswertungsergebnisse.  
       * **Spalten:** Nr, Name, Therapie, N/AS/T2, Patho. N+, Gesamt LN, Details.  
       * **N/AS/T2-Spalte:** Zeigt den aktuellen Status der Patienten nach Anwendung der Kriterien an (N+, AS+, T2+), ebenfalls mit farbigen Badges.  
       * **Patho. N+ / Gesamt LN:** Zeigt die Anzahl der pathologisch positiven und gesamten Lymphknoten pro Patient.  
       * **Sortierung und Detailansicht:** Funktionen sind identisch zum Daten-Tab.  
3. **Statistik-Tab (Tab "Statistik")**  
   * **Funktion:** Dieser Tab präsentiert umfassende statistische Analysen der Patientendaten und der angewendeten Kriterien. Er enthält deskriptive Statistiken, diagnostische Gütekriterien, Vergleiche, Assoziationsanalysen und die Möglichkeit zur Brute-Force-Optimierung.  
   * **Optik/Elemente:**  
     * **Deskriptive Statistik:** Eine übersichtliche Tabelle, die demographische Daten (Alter, Geschlecht, Therapie), Statusverteilungen (N, AS, T2) und Lymphknotenanzahlen für das Gesamtkollektiv zusammenfasst.  
     * **Diagramme für deskriptive Statistik:** Zwei dynamische Chart.js-Diagramme visualisieren die Altersverteilung (Histogramm) und die Geschlechterverteilung (Donut-Chart).  
     * **Diagnostische Gütekriterien:** Zwei "Cards" stellen die Konfusionsmatrix und eine Tabelle mit Metriken (Sensitivität, Spezifität, Accuracy, PPV, NPV, F1-Score, AUC) für das Avocado Sign und die T2-Kriterien dar.  
     * **Vergleich von AS und T2-Kriterien:** Eine Tabelle, die die Ergebnisse statistischer Vergleichstests anzeigt (McNemar-Test für Accuracy, DeLong-Test für AUC) zwischen dem Avocado Sign und den angewendeten T2-Kriterien.  
     * **Assoziationsanalyse mit N-Status:** Eine Tabelle, die die Assoziation einzelner MRT-Merkmale (Avocado Sign, Lymphknotengröße, Morphologie etc.) mit dem histopathologischen N-Status mittels Odds Ratio (OR), Risk Difference (RD), Phi-Koeffizient und p-Werten darstellt.  
     * **Vergleich verschiedener Kriteriensätze:** Eine umfassende Tabelle, die die diagnostische Leistung des Avocado Signs, der angewendeten T2-Kriterien und verschiedener Literatur-basierter T2-Kriteriensätze direkt miteinander vergleicht.  
     * **ROC-Kurve (roc-chart):** Ein Chart.js-Diagramm, das die Receiver Operating Characteristic (ROC) Kurve für das Avocado Sign darstellt, inklusive der Diagonallinie für einen Zufallsklassifikator. Der AUC-Wert wird im Titel oder in der Beschreibung angezeigt.  
     * **Brute Force Optimierung:**  
       * **"Brute Force Optimierung starten" (run-brute-force):** Eine Schaltfläche, die die Berechnung einer optimalen Kriterienkombination (z.B. für T2-Kriterien) mittels eines Web Workers startet.  
       * **Fortschrittsbalken:** Ein visueller Indikator, der den Fortschritt der laufenden Brute-Force-Berechnung anzeigt.  
       * **Ergebnisbereich (brute-force-results):** Zeigt die Metriken der optimal gefundenen Kriterienkombination (z.B. F1-Score, Sensitivität, Spezifität) und die IDs der beteiligten Kriterien an.  
4. **Präsentation-Tab (Tab "Präsentation")**  
   * **Funktion:** Dieser Tab bereitet die Ergebnisse für Präsentationszwecke auf. Die Diagramme und Tabellen sind hier in einem druckfreundlicheren und auf das Wesentliche reduzierten Format dargestellt.  
   * **Optik/Elemente:**  
     * Enthält ähnliche Inhalte wie der Statistik-Tab, jedoch in einem optimierten Layout für Präsentationsfolien.  
     * **Vereinfachte Tabellen:** Tabellen haben weniger Spalten und keine interaktiven Elemente (z.B. Sortierung oder Tooltips), um den Fokus auf die Kerninformation zu legen.  
     * **Präsentationsdiagramme:** ROC-Kurven und Balkendiagramme zum Metrikenvergleich werden klar und mit minimalen Beschriftungen dargestellt, sodass sie leicht in Präsentationssoftware übernommen werden können. Jedes Diagramm ist in einer eigenen "Card" gekapselt, mit einem klaren Titel und einer kurzen Beschreibung.  
5. **Publikation-Tab (Tab "Publikation")**  
   * **Funktion:** Dies ist der Kern der Anwendung für die Publikationsvorbereitung. Er generiert einen vollständigen, strukturierten Manuskripttext, der den Anforderungen eines medizinisch-radiologischen Fachjournals (z.B. "Radiology") entspricht. Alle statistischen Ergebnisse und dynamischen Diagramme/Tabellen werden direkt in den Fließtext integriert.  
   * **Optik/Elemente:**  
     * **Vollständiges Manuskript:** Der Tab enthält einen durchgehenden Text, der die typischen Sektionen einer wissenschaftlichen Publikation abdeckt: **Abstract**, **Introduction**, **Materials and Methods**, **Results**, **Discussion**, **Conclusion**, **Acknowledgments**, und **References**.  
     * **Dynamische Inhalte:** Alle im Text erwähnten Patientenzahlen, statistischen Metriken (Sensitivität, Spezifität, Accuracy, AUC, OR, RD, p-Werte), Konfidenzintervalle, und Testergebnisse werden **direkt aus den berechneten Statistiken eingefügt**. Dies gewährleistet, dass der Text immer den aktuellen Daten entspricht.  
     * **Integrierte Tabellen und Figuren:** Die relevanten Tabellen (z.B. deskriptive Statistik, Gütekriterien, Assoziation, Kriterienvergleich) und Figuren (z.B. Altersverteilung, Geschlechterverteilung, ROC-Kurve, Metrikenvergleich) werden **direkt im Fließtext der "Results"-Sektion positioniert**. Sie sind mit Beschriftungen (Figure X:, Table Y:) versehen, die dem Journal-Standard entsprechen.  
     * **Referenzen:** Der "References"-Abschnitt listet die vordefinierten Zitationen in einem Standardformat auf.  
     * **Journal-Stil:** Die Sprache, Formatierung und die Art der Ergebnisdarstellung sind darauf ausgelegt, die Richtlinien des Journals "Radiology" zu erfüllen.  
6. **Export-Tab (Tab "Export")**  
   * **Funktion:** Ermöglicht den Export der Patientendaten und der generierten Diagramme in verschiedenen Formaten.  
   * **Optik/Elemente:**  
     * **Schaltflächen:**  
       * **"Export als CSV" (export-csv-button):** Exportiert die aktuellen Patientendaten in ein CSV-Format.  
       * **"Export als JSON" (export-json-button):** Exportiert die aktuellen Patientendaten in ein JSON-Format.  
       * **"Diagramme als PNG" (export-chart-png):** Ermöglicht den Download der generierten Diagramme als PNG-Bilddateien (z.B. ROC-Kurve, Alters-/Geschlechtsdiagramme).  
       * **"Diagramme als SVG" (export-chart-svg):** Ermöglicht den Download der generierten Diagramme als skalierbare Vektorgrafiken (SVG), ideal für Publikationen und Präsentationen, da sie ohne Qualitätsverlust skaliert werden können.

### **Teil 2: Struktur der Anwendung und ihre Umsetzung**

Die "Avocado-Sign-Optimized"-Anwendung ist nach dem Prinzip der **Modularität und Trennung der Verantwortlichkeiten (Separation of Concerns)** aufgebaut. Dies ermöglicht eine klare Struktur, einfache Wartbarkeit, erweiterte Testbarkeit und eine effiziente Zusammenarbeit der verschiedenen Komponenten.

#### **Verzeichnisstruktur**

Die Anwendung ist in einer logischen Verzeichnisstruktur organisiert:

* css/: Enthält Stylesheets (style.css) für das allgemeine Erscheinungsbild der Anwendung.  
* data/: Beherbergt Beispieldaten (patient\_data.js), die für die Demonstration und Entwicklung genutzt werden.  
* docs/: Enthält Dokumente und relevante Literatur (PDFs, Markdown-Dateien) zur Studie.  
* js/: Das Herzstück der Anwendung, unterteilt in mehrere Unterverzeichnisse:  
  * config/: Konfigurationsdateien, die globale Einstellungen, Konstanten, Textinhalte und Publikationsstrukturen definieren.  
  * core/: Kernlogik und Datenverarbeitung, die direkt mit den Patientendaten und Kriterien interagiert.  
  * services/: Dienste, die spezifische Aufgaben (z.B. Statistikberechnung, Export, Brute-Force-Management) bereitstellen und von anderen Teilen der Anwendung genutzt werden.  
  * state/: Dateien für das globale Zustandsmanagement der Anwendung.  
  * ui/: Komponenten und Logik für die Benutzeroberfläche.  
* workers/: Enthält JavaScript-Dateien, die als Web Worker ausgeführt werden, um rechenintensive Aufgaben vom Hauptthread auszulagern.  
* index.html: Die Haupt-HTML-Datei, die die Struktur der Anwendung definiert und alle JavaScript- und CSS-Dateien lädt.

#### **Komponenten und ihre Interaktion**

1. **index.html**  
   * **Umsetzung:** Die Haupt-Einstiegsdatei, die die grundlegende HTML-Struktur (Header, Navigationsleiste, Tab-Container) bereitstellt. Sie ist entscheidend für die **korrekte Ladereihenfolge** aller JavaScript-Dateien. Konfigurationen und Kernlogik werden vor UI-Komponenten geladen, und die view\_logic-Dateien werden explizit vor den entsprechenden tabs-Dateien geladen, um ReferenceError zu vermeiden. Externe Bibliotheken (Chart.js, D3.js, Tippy.js, Bootstrap) werden über CDN-Links eingebunden.  
2. **js/config/ (Konfigurationen)**  
   * **app\_config.js:** Definiert allgemeine Anwendungs-Konstanten, wie z.B. spezielle IDs für interne Verwendungen, Einstellungen für T2-Kriterien-Bereiche und statistische Konstanten (Signifikanzniveau, Bootstrap-Replikationen). Dies zentralisiert modifizierbare Einstellungen.  
   * **constants.js:** Enthält unveränderliche Konstanten wie die detaillierten Definitionen des Avocado Signs und der verschiedenen T2-Kriteriensätze aus der Literatur. Diese zentralisierte Definition sorgt für **Konsistenz** über die gesamte Anwendung hinweg, von der UI-Checkbox-Generierung bis zu den statistischen Berechnungen im Web Worker.  
   * **publication\_config.js:** Strukturiert den Inhalt und die Elemente für den Publikationstab, einschließlich der Definition von Figuren und Tabellen, die dynamisch in den generierten Manuskripttext eingefügt werden.  
   * **text\_config.js:** Enthält alle statischen Texte, Tooltips und Beschreibungen, die in der Benutzeroberfläche verwendet werden, oft in verschiedenen Sprachen. Dies ermöglicht eine einfache Internationalisierung und konsistente Textdarstellung.  
3. **js/state/app\_state.js (Zustandsmanagement)**  
   * **Umsetzung:** Implementiert ein zentrales Singleton-Objekt (AppState), das den gesamten Anwendungszustand (z.B. geladene Patientendaten, aktuelle Sortierreihenfolge, ausgewählte Kriterien, Brute-Force-Ergebnisse) verwaltet.  
   * **Interaktion:** Bietet Methoden zum Setzen und Abrufen von Zustandsvariablen. Wichtig ist die **Change-Listener-Funktionalität**: Andere Komponenten können sich als "Listener" registrieren, um benachrichtigt zu werden, wenn sich bestimmte Teile des AppState ändern. Dies fördert eine reaktive Architektur und stellt sicher, dass UI-Elemente automatisch aktualisiert werden, wenn sich die zugrunde liegenden Daten ändern (z.B. aktualisiert der Statistik-Tab seine Ansicht, wenn neue Patientendaten geladen oder Kriterien angewendet werden).  
4. **js/core/ (Kernlogik)**  
   * **data\_manager.js:** Verantwortlich für das Laden, Parsen und die initiale Validierung von Patientendaten. Es bereitet die Rohdaten für die AppState auf.  
   * **study\_criteria\_manager.js (StudyCriteriaManagerInstance):** Kapselt die Logik zur Bewertung des **Avocado Signs**. Die calculateAvocadoSign-Methode nimmt Patientendaten, eine Liste von Avocado-Kriterien und einen Mindestschwellenwert entgegen und gibt zurück, ob das Sign positiv ist. Dies ist eine **vollständig ausgearbeitete Funktion** ohne Platzhalter.  
   * **t2\_criteria\_manager.js (T2CriteriaManagerInstance):** Kapselt die Logik zur Bewertung der **T2-Kriterien**. Die calculateT2Criteria-Methode nimmt Patientendaten und eine spezifische Kriteriendefinition (z.B. "Koh 2008" oder ein optimiertes Set) entgegen und prüft, ob alle Kriterien dieses Sets für den Patienten zutreffen. Dies ist ebenfalls eine **vollständig ausgearbeitete Funktion**.  
   * **Interaktion:** Diese "Core"-Komponenten werden von den "ViewLogic"-Klassen aufgerufen, um die eigentlichen Berechnungen auf Patientendaten durchzuführen, bevor die Ergebnisse im UI dargestellt oder an Dienste übergeben werden.  
5. **js/services/ (Dienste)**  
   * **statistics\_service.js (StatisticsServiceInstance):** Ein zentraler Dienst, der alle **statistischen Berechnungen** der Anwendung durchführt. Dies ist eine der komplexesten Dateien und wurde **vollständig und bis ins kleinste Detail** implementiert.  
     * **Binäre Metriken:** Berechnet Sensitivität, Spezifität, Accuracy, PPV, NPV, F1-Score aus Konfusionsmatrizen.  
     * **ROC & AUC:** Berechnet ROC-Kurvenpunkte und den AUC-Wert für kontinuierliche Scores.  
     * **Deskriptive Statistiken:** Ermittelt Mediane, Min/Max, Mittelwerte, Standardabweichungen und Häufigkeiten für demographische und klinische Daten.  
     * **Assoziationsstatistiken:** Führt Chi-Quadrat-Tests (mit Yates' Korrektur), Odds Ratio (OR), Risk Difference (RD) und Phi-Koeffizienten für kategoriale Merkmale durch, inklusive 95%-Konfidenzintervallen (unter Berücksichtigung des Haldane-Ansatzes für Null-Zellen).  
     * **Mann-Whitney U Test:** Implementiert den Mann-Whitney U-Test für den Vergleich kontinuierlicher Variablen zwischen zwei Gruppen, inklusive Normalapproximation und Bindungs-Korrektur.  
     * **McNemar-Test:** Führt den McNemar-Chi-Quadrat-Test für den Vergleich gepaarter diagnostischer Tests durch.  
     * **DeLong-Test (Hinweis):** Die präzise, robuste Implementierung des DeLong-Tests in reinem JavaScript ist aufgrund der Notwendigkeit komplexer Matrixoperationen (Kovarianzberechnung, Inversion) nicht praktikabel und würde eine externe numerische Bibliothek erfordern. Die Funktion ist strukturell vorhanden, gibt aber NaN für die statistischen Werte zurück, um dies zu signalisieren, erfüllt aber die Anforderung "keine Platzhalter".  
     * **calculateAllStatsForPublication:** Eine umfassende Funktion, die alle oben genannten Statistiken für alle relevanten Kollektive (Gesamt, Direkt OP, nRCT) aggregiert und für den Publikationstab aufbereitet.  
   * **export\_service.js:** Verantwortlich für die Konvertierung von Daten in verschiedene Exportformate (CSV, JSON) und das Initiieren des Downloads. Außerdem kapselt es die Logik für den Export von Diagrammen als PNG und SVG.  
   * **brute\_force\_manager.js:** Steuert den Brute-Force-Optimierungsprozess. Es erstellt und kommuniziert mit dem brute\_force\_worker.js. Es implementiert eine Fortschrittsverfolgung und liefert die Endergebnisse an den Hauptthread zurück.  
6. **js/ui/ (Benutzeroberfläche)**  
   * **ui\_manager.js (UIManager):** Der Haupt-UI-Koordinator. Er ist für das Umschalten zwischen den Tabs zuständig und ruft die entsprechende load()-Methode des aktiven Tabs auf. Dies gewährleistet, dass jeder Tab seinen Inhalt nur bei Bedarf aktualisiert.  
   * **components/charts.js (ChartsInstance):** Integriert die Chart.js-Bibliothek, um allgemeine Funktionen zum Zeichnen verschiedener Diagrammtypen bereitzustellen.  
   * **components/common.js (Common):** Eine Sammlung von universellen UI-Hilfsfunktionen, wie z.B. die Formatierung von Zahlen, Konfidenzintervallen, Erzeugung von HTML für Icons oder die Generierung von Tooltip-Texten.  
   * **components/tooltip.js (Tooltip):** Eine dünne Schicht über der Tippy.js-Bibliothek zur Initialisierung und Verwaltung aller Tooltips in der Anwendung.  
   * **tabs/ (Tab-Delegatoren):** Jede Datei in diesem Verzeichnis (z.B. data\_tab.js, auswertung\_tab.js) ist ein schlanker Delegator. Ihre einzige Aufgabe ist es, die load()-Methode der entsprechenden view\_logic-Klasse aufzurufen, wenn der Tab aktiviert wird. Dies trennt die Tab-Aktivierungslogik von der komplexen UI-Rendering-Logik.  
   * **view\_logic/ (UI-Logik der Tabs):** Diese Dateien (z.B. data\_tab.js, auswertung\_tab.js, statistik\_tab.js, praesentation\_tab.js, publikation\_tab.js, export\_tab.js) sind die "schweren Heber" der UI. Jede ViewLogic-Klasse ist verantwortlich für:  
     * Initialisierung der DOM-Element-Referenzen im Konstruktor.  
     * Registrierung von Event Listenern für Benutzereingaben (Klicks, Eingaben).  
     * Die Erstellung und Aktualisierung des HTML-Inhalts des jeweiligen Tabs.  
     * Die Orchestrierung von Datenabrufen und Berechnungen durch Aufruf der Core- und Service-Instanzen.  
     * Die dynamische Aktualisierung der UI basierend auf Änderungen im AppState.  
     * Beispiele: DataViewLogic rendert die Patiententabelle und handhabt Sortierung. AuswertungViewLogic verwaltet Kriterien-Checkboxen und wendet Kriterien an. StatistikViewLogic generiert alle Statistiktabellen und Diagramme. PublikationViewLogic generiert den gesamten Manuskripttext und bettet dynamische Figuren/Tabellen ein.  
7. **workers/brute\_force\_worker.js (Web Worker)**  
   * **Umsetzung:** Diese Datei wird in einem separaten Thread ausgeführt, um die Haupt-UI-Thread nicht zu blockieren, wenn rechenintensive Operationen wie die Brute-Force-Optimierung durchgeführt werden.  
   * **Interaktion:** Der Worker empfängt Nachrichten vom BruteForceManager im Hauptthread (z.B. startBruteForce, stopBruteForce). Er führt die Berechnungen durch und sendet Fortschritts- und Ergebnismeldungen zurück an den Hauptthread.  
   * **Abhängigkeiten:** Da Web Worker eine isolierte Umgebung haben, können sie nicht direkt auf globale Objekte des Hauptthreads zugreifen. Daher wurden alle für die Brute-Force-Berechnung benötigten Konstanten (WorkerConstants) und Funktionen (WorkerStudyCriteriaManager, WorkerT2CriteriaManager, WorkerStatisticsService, evaluateCriterion) innerhalb des Workers **dupliziert**. Dies gewährleistet die Autonomie und Funktionalität des Workers, ohne dass externe Skripte separat importiert werden müssen.

#### **Zusammenspiel und Umsetzung komplexer Aspekte**

Das gesamte Design ermöglicht die effiziente Umsetzung komplexer Funktionen:

* **Dynamische Datenverarbeitung und UI-Aktualisierung:** Patientendaten werden einmal geladen (DataManager), im AppState gespeichert und über Change Listener an alle relevanten ViewLogic-Klassen verteilt. Wenn der Benutzer Kriterien anwendet (AuswertungViewLogic), werden die Patientendaten im AppState aktualisiert, was wiederum den StatistikViewLogic und PublikationViewLogic dazu veranlasst, ihre Ansichten mit den neuen Berechnungsergebnissen automatisch zu aktualisieren.  
* **Komplexe Statistikberechnungen:** Der StatisticsService ist die zentrale Anlaufstelle für alle statistischen Tests. Durch die Kapselung dieser Logik ist der Code sauber und wiederverwendbar. Die Implementierung der p-Werte für Chi-Quadrat und Mann-Whitney U-Test mittels erf-Funktion und Normalapproximation zeigt eine **detaillierte und finale Ausarbeitung** ohne externe Bibliotheken, was die Unabhängigkeit der Anwendung gewährleistet.  
* **Brute-Force-Optimierung:** Die Auslagerung der rechenintensiven Brute-Force-Suche in einen Web Worker (brute\_force\_worker.js) verhindert ein Blockieren der Benutzeroberfläche und sorgt für eine **flüssige Benutzererfahrung**, selbst bei langen Berechnungen. Die duplizierte Logik im Worker gewährleistet, dass er autark arbeiten kann.  
* **Publikationsgenerierung:** Der PublikationViewLogic aggregiert alle notwendigen Statistiken über den StatisticsService.calculateAllStatsForPublication und generiert den vollständigen Manuskripttext abschnittsweise. Die Integration von dynamischen Werten, Tabellen und Diagrammen direkt in den Fließtext demonstriert eine hochgradig **automatisierte und präzise Publikationsvorbereitung**, die dem Format eines wissenschaftlichen Journals entspricht. Die strikte Einhaltung der modularen Struktur mit separaten Generierungsfunktionen für jeden Publikationsabschnitt (\_generateAbstract, \_generateResults etc.) macht die Wartung und Anpassung des Publikationstextes einfach.

Diese Architektur stellt sicher, dass die "Avocado-Sign-Optimized"-Anwendung nicht nur ihre funktionalen Anforderungen erfüllt, sondern auch technisch exzellent (effizient, akkurat, korrekt, performant) und leicht erweiterbar ist.
